#index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ritek Mehta | Interactive Portfolio</title>
    <link rel="stylesheet" href="style.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
</head>
<!-- Add to index.html before </body> -->
<div class="ai-assistant-widget glass-card">
    <i class='bx bx-bot' id="ai-icon"></i>
</div>

<div class="ai-chat-modal glass-card" id="ai-chat-modal">
    <div class="ai-header">
        <div class="ai-title">
            <i class='bx bx-bot'></i>
            <span>AI Portfolio Assistant</span>
        </div>
        <button class="close-ai">√ó</button>
    </div>
    <div class="ai-chat-body">
        <div class="ai-messages" id="ai-messages">
            <div class="ai-message bot-message">
                Hi! I'm your AI assistant. Ask me about Ritek's skills, projects, or experience!
            </div>
        </div>
        <div class="ai-input-container">
            <input type="text" id="ai-input" placeholder="Ask me anything...">
            <button id="send-ai"><i class='bx bx-send'></i></button>
        </div>
    </div>
</div>


<body>
    <!-- Particle Background -->
    <canvas id="particle-canvas"></canvas>
    
    <!-- 3D Background -->
    <div id="three-bg"></div>
    
    <!-- Glass Morphism Overlay -->
    <div class="glass-overlay"></div>
    
    <!-- Reading Progress -->
    <div class="reading-progress" id="reading-progress"></div>
    
    <!-- Theme Toggle -->
    <div class="theme-toggle glass-card">
        <i class='bx bx-moon' id="theme-icon"></i>
    </div>
    
    <!-- Interactive Terminal Widget -->
    <div class="terminal-widget glass-card">
        <i class='bx bx-terminal' id="terminal-icon"></i>
    </div>
    
    <!-- Live Code Playground Widget -->
    <div class="playground-widget glass-card">
        <i class='bx bx-code-alt' id="playground-icon"></i>
    </div>
    
    <!-- Voice Control Widget -->
    <div class="voice-widget glass-card">
        <i class='bx bx-microphone'></i>
    </div>
    
    <!-- Collaboration Widget -->
    <div class="collab-widget glass-card">
        <i class='bx bx-group'></i>
    </div>
    
    <!-- Achievement Notification -->
    <div class="achievement-notification glass-card" id="achievement-notification">
        <div class="achievement-icon">üèÜ</div>
        <div class="achievement-content">
            <h4>Achievement Unlocked!</h4>
            <p id="achievement-message">Welcome to my portfolio!</p>
        </div>
    </div>
    
    <!-- Voice Feedback -->
    <div class="voice-feedback glass-card" id="voice-feedback"></div>

    <!-- Add to widgets section -->
<div class="weather-widget glass-card">
    <div class="weather-info">
        <i class='bx bx-current-location' id="weather-icon"></i>
        <div class="weather-data">
            <span class="temp">--¬∞C</span>
            <span class="location">Loading...</span>
        </div>
    </div>
</div>
    
    <!-- Loading Screen -->
    <div class="loading-screen" id="loading-screen">
        <div class="loading-content glass-card">
            <div class="loading-spinner"></div>
            <h2>Initializing Portfolio</h2>
            <div class="loading-progress">
                <div class="progress-bar"></div>
            </div>
            <p class="loading-text">Loading amazing experiences...</p>
        </div>
    </div>
    
    <!-- Cursor Effect -->
    <div class="cursor"></div>
    <div class="cursor-follower"></div>
    
    <!-- Header -->
    <header class="header glass-card">
        <a href="#" class="logo">Ritek<span>.</span></a>
        <nav class="navbar">
            <a href="#" style="--i:1" class="nav-link">Home</a>
            <a href="#about" style="--i:2" class="nav-link">About</a>
            <a href="#skills" style="--i:3" class="nav-link">Skills</a>
            <a href="#project" style="--i:4" class="nav-link">Projects</a>
            <a href="#contact" style="--i:5" class="nav-link">Contact</a>
        </nav>
        <div class="menu-toggle">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </header>
    
    <!-- Home Section -->
    <section class="home" id="home">
        <div class="parallax-bg"></div>
        <div class="home-content">
            <div class="text-content">
                <div class="badge glass-card">üöÄ Available for Freelance</div>
                <h3>Hello, It's Me</h3>
                <h1>Ritek Mehta</h1>
                <h3>And I'm a <span class="text"></span></h3>
                <p>with extensive experience.
                    <br>Expertise in creating websites, frontend design, backend development, and many more...
                </p>
                <div class="home-sci">
                    <a href="https://www.facebook.com/ritek.mehta" style="--i:7" class="glass-card"><i class='bx bxl-facebook'></i></a>
                    <a href="https://www.instagram.com/_ri.tek09/" style="--i:8" class="glass-card"><i class='bx bxl-instagram' ></i></a>
                    <a href=" https://wa.me/message/3VMY56ZGRTKAD1 " style="--i:9" class="glass-card"><i class='bx bxl-whatsapp' ></i></a>
                    <a href="https://www.linkedin.com/in/ritek-mehta-57198a2a3/" style="--i:10" class="glass-card"><i class='bx bxl-linkedin'></i></a>
                </div>
                <div class="cta-buttons">
                    <a href="https://drive.google.com/file/d/1_nfkwwYTqTh0qEEf_Gi6vE6dCxY_bPXr/view?usp=sharing" class="btn-box primary glass-card">
                        <i class='bx bx-download'></i>Download Resume
                    </a>
                    <a href="#contact" class="btn-box secondary glass-card">
                        <i class='bx bx-chat'></i>Hire Me
                    </a>
                </div>
            </div>
            <div class="home-img">
                <div class="image-container glass-card">
                    <img src="img.jpg" alt="Ritek Mehta">
                    <div class="floating-elements">
                        <span class="floating-element glass-card">HTML</span>
                        <span class="floating-element glass-card">CSS</span>
                        <span class="floating-element glass-card">JS</span>
                        <span class="floating-element glass-card">Java</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Stats Section -->
        <div class="stats-container">
            <div class="stat-item glass-card">
                <div class="stat-number" data-count="15">3</div>
                <div class="stat-label">Projects</div>
            </div>
            <div class="stat-item glass-card">
                <div class="stat-number" data-count="8">2</div>
                <div class="stat-label">Clients</div>
            </div>
            <div class="stat-item glass-card">
                <div class="stat-number" data-count="20">7</div>
                <div class="stat-label">Technologies</div>
            </div>
        </div>
    </section>
    
    <!-- About Section -->
    <section class="about parallax-section" id="about">
        <div class="parallax-bg"></div>
        <div class="container">
            <h2 class="section-title">About <span>Me</span></h2>
            <div class="about-content">
                <div class="about-img">
                    <div class="image-wrapper glass-card">
                        <img src="img.jpg" alt="Ritek Mehta">
                        <div class="experience-badge glass-card">
                            <span>3+ Years</span>
                            <small>Experience</small>
                        </div>
                    </div>
                </div>
                <div class="about-text">
                    <p>Hi <span>I'm Ritek Mehta</span>, a tech enthusiast from Haldwani, Nainital, the beautiful region of Uttarakhand. I'm currently pursuing my MCA from Chandigarh University, where I'm developing strong skills in software development, data structures, and emerging technologies.</p>
                    <p>I am actively seeking opportunities to kickstart my career and contribute my skills and enthusiasm to a dynamic team. I'm passionate about learning, problem-solving, and applying my knowledge to real-world challenges in tech.</p>
                    
                    <div class="personal-info">
                        <div class="info-item glass-card">
                            <h3>Name:</h3>
                            <span>Ritek Mehta</span>
                        </div>
                        <div class="info-item glass-card">
                            <h3>Date of Birth:</h3>
                            <span>January 9<sup>th</sup> 2004</span>
                        </div>
                        <div class="info-item glass-card">
                            <h3>Address:</h3>
                            <span>583, Mehta Bhawan, Nai Basti Kathgodam, Nainital, Uttarakhand</span>
                        </div>
                        <div class="info-item glass-card">
                            <h3>Zip Code:</h3>
                            <span>263126</span>
                        </div>
                        <div class="info-item glass-card">
                            <h3>E-mail:</h3>
                            <span>rm7566760@gmail.com</span>
                        </div>
                        <div class="info-item glass-card">
                            <h3>Phone:</h3>
                            <span>7500760585</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Education Section -->
    <section class="education" id="education">
        <div class="container">
            <h2 class="section-title">My <span>Education</span></h2>
            <div class="timeline">
                <div class="timeline-item">
                    <div class="timeline-content glass-card">
                        <span class="timeline-date">2024-Present</span>
                        <h3>Post Graduation</h3>
                        <h4>Chandigarh University, Punjab</h4>
                        <p>Currently pursuing "MCA" from University Institute of Computing (UIC) Chandigarh University with an aggregate CGPA of 7.5 in the last semester.</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-content glass-card">
                        <span class="timeline-date">2021</span>
                        <h3>Graduation</h3>
                        <h4>MBGPG College, Haldwani, Uttrakhand</h4>
                        <p>I have completed my Graduation from MBGPG College.</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-content glass-card">
                        <span class="timeline-date">2020-21</span>
                        <h3>Intermediate</h3>
                        <h4>Inspiration Public School, Haldwani Uttrakhand</h4>
                        <p>I have completed my Intermediate from CBSE Board.</p>
                    </div>
                </div>
                <div class="timeline-item">
                    <div class="timeline-content glass-card">
                        <span class="timeline-date">2019-20</span>
                        <h3>High School</h3>
                        <h4>Inspiration Public School, Haldwani, Nainital</h4>
                        <p>I have completed my High School from CBSE Board.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Skills Section -->
    <section class="skills parallax-section" id="skills">
        <div class="parallax-bg"></div>
        <div class="container">
            <h2 class="section-title">My <span>Skills</span></h2>
            <div class="skills-content">
                <div class="technical-skills glass-card">
                    <h3>Technical Skills</h3>
                    <div class="skill-bars">
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bxl-html5'></i> HTML</span>
                                <span>90%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress html" data-width="90"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bxl-css3'></i> CSS</span>
                                <span>70%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress css" data-width="70"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bxl-javascript'></i> JavaScript</span>
                                <span>75%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress javascript" data-width="75"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bxl-java'></i> Java</span>
                                <span>80%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress java" data-width="80"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bx-code-block'></i> JSP & Servlet</span>
                                <span>85%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress jsp" data-width="85"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bxl-python'></i> Python</span>
                                <span>50%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress python" data-width="50"></div>
                            </div>
                        </div>
                        <div class="skill-bar">
                            <div class="skill-info">
                                <span><i class='bx bx-data'></i> MySQL</span>
                                <span>80%</span>
                            </div>
                            <div class="skill-progress">
                                <div class="progress mysql" data-width="80"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="professional-skills glass-card">
                    <h3>Professional Skills</h3>
                    <div class="radial-skills">
                        <div class="radial-skill">
                            <div class="radial-progress glass-card" data-progress="85">
                                <span>85%</span>
                            </div>
                            <h4>Creativity</h4>
                        </div>
                        <div class="radial-skill">
                            <div class="radial-progress glass-card" data-progress="85">
                                <span>85%</span>
                            </div>
                            <h4>Communication</h4>
                        </div>
                        <div class="radial-skill">
                            <div class="radial-progress glass-card" data-progress="80">
                                <span>80%</span>
                            </div>
                            <h4>Problem Solving</h4>
                        </div>
                        <div class="radial-skill">
                            <div class="radial-progress glass-card" data-progress="95">
                                <span>95%</span>
                            </div>
                            <h4>Teamwork</h4>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Skill Tree -->
            <div class="skill-tree glass-card">
                <h3>Skill Progression Path</h3>
                <div class="skill-path">
                    <div class="skill-node" data-skill="html" data-level="5">
                        <span>HTML5</span>
                    </div>
                    <div class="skill-connector"></div>
                    <div class="skill-node" data-skill="css" data-level="4">
                        <span>CSS3</span>
                    </div>
                    <div class="skill-connector"></div>
                    <div class="skill-node" data-skill="js" data-level="4">
                        <span>JavaScript</span>
                    </div>
                    <div class="skill-connector"></div>
                    <div class="skill-node" data-skill="react" data-level="3">
                        <span>React</span>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Projects Section -->
    <!-- Add to projects section -->
<div class="3d-viewer-widget glass-card">
    <i class='bx bx-cube' id="3d-icon"></i>
</div>

<div class="model-viewer-modal glass-card" id="model-viewer">
    <div class="viewer-header">
        <h3>3D Project Viewer</h3>
        <button class="close-viewer">√ó</button>
    </div>
    <div class="viewer-body">
        <canvas id="3d-canvas"></canvas>
        <div class="viewer-controls">
            <button id="rotate-model"><i class='bx bx-rotate-right'></i></button>
            <button id="zoom-in"><i class='bx bx-zoom-in'></i></button>
            <button id="zoom-out"><i class='bx bx-zoom-out'></i></button>
        </div>
    </div>
</div>

    <section class="projects" id="project">
        <div class="container">
            <h2 class="section-title">Latest <span>Projects</span></h2>
            <div class="projects-grid">
                <div class="project-card glass-card advanced-card">
                    <div class="project-image">
                        <img src="hospital.png" alt="Hospital Management System">
                        <div class="project-overlay">
                            <div class="project-links">
                                <a href="#" class="project-link glass-card"><i class='bx bx-link-external'></i></a>
                                <a href="https://github.com/Ritek09/Hospital_Management" class="project-link glass-card"><i class='bx bxl-github'></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="project-content">
                        <h3>Hospital Management System</h3>
                        <p>A comprehensive system for managing hospital operations, patient records, and appointments with real-time data processing.</p>
                        <div class="project-tech">
                            <span class="tech-tag glass-card">Java</span>
                            <span class="tech-tag glass-card">Servlet</span>
                            <span class="tech-tag glass-card">JSP</span>
                            <span class="tech-tag glass-card">MySQL</span>
                        </div>
                        <a href="https://github.com/Ritek09/Hospital_Management" class="btn-box glass-card">View Project</a>
                    </div>
                </div>
                <div class="project-card glass-card advanced-card">
                    <div class="project-image">
                        <img src="pac-man.png" alt="Pac-Man Game">
                        <div class="project-overlay">
                            <div class="project-links">
                                <a href="#" class="project-link glass-card"><i class='bx bx-link-external'></i></a>
                                <a href="https://github.com/Ritek09/pac-man-" class="project-link glass-card"><i class='bx bxl-github'></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="project-content">
                        <h3>Pac-Man Game with AI</h3>
                        <p>Classic Pac-Man game implemented with AI algorithms for ghost movement and intelligent pathfinding using Manhattan distance.</p>
                        <div class="project-tech">
                            <span class="tech-tag glass-card">Python</span>
                            <span class="tech-tag glass-card">AI</span>
                            <span class="tech-tag glass-card">Tkinter</span>
                            <span class="tech-tag glass-card">Algorithms</span>
                        </div>
                        <a href="https://github.com/Ritek09/pac-man-" class="btn-box glass-card">View Project</a>
                    </div>
                </div>
                <div class="project-card glass-card advanced-card">
                    <div class="project-image">
                        <img src="smart.png" alt="Smart Tracker App">
                        <div class="project-overlay">
                            <div class="project-links">
                                <a href="#" class="project-link glass-card"><i class='bx bx-link-external'></i></a>
                                <a href="https://github.com/Ritek09/Smart-Tracker-App" class="project-link glass-card"><i class='bx bxl-github'></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="project-content">
                        <h3>Smart-Tracker App</h3>
                        <p>A modern expense tracking application with intuitive UI, real-time analytics, and cross-platform compatibility.</p>
                        <div class="project-tech">
                            <span class="tech-tag glass-card">React</span>
                            <span class="tech-tag glass-card">Node.js</span>
                            <span class="tech-tag glass-card">MongoDB</span>
                            <span class="tech-tag glass-card">Bootstrap</span>
                        </div>
                        <a href="https://github.com/Ritek09/Smart-Tracker-App" class="btn-box glass-card">View Project</a>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Contact Section -->
    <section class="contact" id="contact">
        <div class="container">
            <h2 class="section-title">Contact <span>Me</span></h2>
            <div class="contact-content">
                <div class="contact-info glass-card">
                    <h3>Let's Work Together</h3>
                    <p>I approach every task with a collaborative mindset, valuing the synergy that comes from diverse perspectives. I believe in the power of teamwork to elevate ideas and transform them into impactful solutions.</p>
                    <div class="contact-details">
                        <div class="contact-item">
                            <i class='bx bxs-envelope'></i>
                            <div>
                                <h4>Email</h4>
                                <span>rm7566760@gmail.com</span>
                            </div>
                        </div>
                        <div class="contact-item">
                            <i class='bx bxs-phone'></i>
                            <div>
                                <h4>Phone</h4>
                                <span>7500760585</span>
                            </div>
                        </div>
                        <div class="contact-item">
                            <i class='bx bxs-map'></i>
                            <div>
                                <h4>Location</h4>
                                <span>Haldwani, Uttarakhand</span>
                            </div>
                        </div>
                    </div>
                    <div class="social-links">
                        <a href="https://www.facebook.com/ritek.mehta" class="glass-card"><i class='bx bxl-facebook'></i></a>
                        <a href="https://www.instagram.com/_ri.tek09/" class="glass-card"><i class='bx bxl-instagram'></i></a>
                        <a href="https://wa.me/message/3VMY56ZGRTKAD1" class="glass-card"><i class='bx bxl-whatsapp'></i></a>
                        <a href="https://www.linkedin.com/in/ritek-mehta-57198a2a3/" class="glass-card"><i class='bx bxl-linkedin'></i></a>
                    </div>
                </div>
                <div class="contact-form glass-card">
                    <form id="contactForm">
                        <div class="form-group">
                            <input type="text" placeholder="Your Name" required class="glass-card">
                        </div>
                        <div class="form-group">
                            <input type="email" placeholder="Your Email" required class="glass-card">
                        </div>
                        <div class="form-group">
                            <input type="text" placeholder="Subject" class="glass-card">
                        </div>
                        <div class="form-group">
                            <textarea placeholder="Your Message" rows="5" required class="glass-card"></textarea>
                        </div>
                        <button type="submit" class="btn-box glass-card">
                            <i class='bx bx-send'></i>Send Message
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>Thank you for exploring my portfolio! Let's connect and bring your next project to life, adding another chapter to this exciting journey of design and innovation.</p>
            <div class="footer-bottom">
                <p>&copy; 2023 Ritek Mehta. All Rights Reserved.</p>
            </div>
        </div>
    </footer>
    
    <!-- Interactive Terminal Modal -->
    <div class="terminal-modal" id="terminal-modal">
        <div class="terminal-header glass-card">
            <div class="terminal-title">
                <i class='bx bx-terminal'></i>
                <span>portfolio-terminal</span>
            </div>
            <div class="terminal-controls">
                <button class="terminal-btn minimize">‚àí</button>
                <button class="terminal-btn maximize">‚ñ°</button>
                <button class="terminal-btn close" id="close-terminal">√ó</button>
            </div>
        </div>
        <div class="terminal-body">
            <div class="terminal-output" id="terminal-output">
                <div class="terminal-line">Welcome to Ritek's Portfolio Terminal v2.0</div>
                <div class="terminal-line">Type 'help' to see available commands</div>
                <div class="terminal-line">></div>
            </div>
            <div class="terminal-input">
                <span class="prompt">visitor@portfolio:~$ </span>
                <input type="text" id="terminal-input" autocomplete="off">
            </div>
        </div>
    </div>
    
    <!-- Live Code Playground Modal -->
    <div class="playground-modal" id="playground-modal">
        <div class="playground-header glass-card">
            <div class="playground-title">
                <i class='bx bx-code-alt'></i>
                <span>Live Code Playground</span>
            </div>
            <div class="playground-controls">
                <button class="playground-btn" id="run-code">Run</button>
                <button class="playground-btn" id="reset-code">Reset</button>
                <button class="playground-btn close" id="close-playground">√ó</button>
            </div>
        </div>
        <div class="playground-body">
            <div class="code-editors">
                <div class="editor-section">
                    <div class="editor-header">HTML</div>
                    <textarea id="html-editor" class="code-editor">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;My Playground&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Hello, I'm Ritek!&lt;/h1&gt;
    &lt;div id="demo"&gt;Welcome to my code playground&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</textarea>
                </div>
                <div class="editor-section">
                    <div class="editor-header">CSS</div>
                    <textarea id="css-editor" class="code-editor">body {
    font-family: Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
    padding: 50px;
}

h1 {
    color: #0ef;
    text-shadow: 0 0 10px rgba(14, 239, 255, 0.5);
}

#demo {
    background: rgba(255,255,255,0.1);
    padding: 20px;
    border-radius: 10px;
    backdrop-filter: blur(10px);
}</textarea>
                </div>
                <div class="editor-section">
                    <div class="editor-header">JavaScript</div>
                    <textarea id="js-editor" class="code-editor">document.getElementById('demo').addEventListener('click', function() {
    this.style.transform = 'scale(1.1)';
    this.style.background = 'rgba(14, 239, 255, 0.2)';
    setTimeout(() => {
        this.style.transform = 'scale(1)';
        this.style.background = 'rgba(255,255,255,0.1)';
    }, 300);
});

// Typewriter effect
const text = "Built with passion by Ritek Mehta";
let i = 0;
function typeWriter() {
    if (i < text.length) {
        document.getElementById('demo').innerHTML += text.charAt(i);
        i++;
        setTimeout(typeWriter, 50);
    }
}
typeWriter();</textarea>
                </div>
            </div>
            <div class="preview-section">
                <div class="preview-header">Live Preview</div>
                <iframe id="code-preview" class="code-preview"></iframe>
            </div>
        </div>
    </div>

    <!-- Collaboration Modal -->
    <div class="collab-modal glass-card" id="collab-modal">
        <div class="collab-header">
            <h3>Live Collaboration Demo</h3>
            <button class="close-collab">√ó</button>
        </div>
        <div class="collab-body">
            <div class="user-list">
                <div class="user active">
                    <div class="user-avatar">You</div>
                    <span>Online</span>
                </div>
                <div class="user">
                    <div class="user-avatar">Guest</div>
                    <span>Typing...</span>
                </div>
            </div>
            <div class="collab-editor">
                <textarea placeholder="Start collaborating..."></textarea>
            </div>
            <div class="collab-chat">
                <div class="message">Guest joined the session</div>
                <div class="message user-message">Hello! Let's collaborate</div>
                <input type="text" placeholder="Type a message...">
            </div>
        </div>
    </div>

    <!-- Back to Top -->
    <a href="#" class="back-to-top glass-card">
        <i class='bx bx-chevron-up'></i>
    </a>
    <script src="script.js"></script>
</body>
</html>




#style.css
  /* style.css - Enhanced with All Interactive Features */
:root {
    --primary-color: #0ef;
    --secondary-color: #081b29;
    --accent-color: #ff4d94;
    --text-color: #ededed;
    --bg-color: #081b29;
    --card-bg: rgba(255, 255, 255, 0.05);
    --glass-bg: rgba(255, 255, 255, 0.1);
    --glass-border: rgba(255, 255, 255, 0.2);
    --gradient: linear-gradient(135deg, #0ef, #ff4d94);
    --border-radius: 20px;
    --transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    --shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    --blur: blur(20px);
}

[data-theme="light"] {
    --primary-color: #007bff;
    --secondary-color: #f8f9fa;
    --accent-color: #e83e8c;
    --text-color: #333;
    --bg-color: #f8f9fa;
    --card-bg: rgba(0, 0, 0, 0.05);
    --glass-bg: rgba(255, 255, 255, 0.8);
    --glass-border: rgba(0, 0, 0, 0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

html {
    scroll-behavior: smooth;
}

body {
    background-color: var(--bg-color);
    color: var(--text-color);
    overflow-x: hidden;
    transition: var(--transition);
    position: relative;
}

/* Particle Canvas */
#particle-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -3;
    pointer-events: none;
}

/* 3D Background */
#three-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
}

/* Glass Overlay */
.glass-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        45deg,
        rgba(14, 239, 255, 0.05),
        rgba(255, 77, 148, 0.05),
        rgba(14, 239, 255, 0.05)
    );
    backdrop-filter: var(--blur);
    z-index: -1;
    pointer-events: none;
}

/* Reading Progress */
.reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    transform-origin: left;
    transform: scaleX(0);
    transition: transform 0.3s;
    z-index: 10000;
}

/* Glass Morphism Base Class */
.glass-card {
    background: var(--glass-bg);
    backdrop-filter: var(--blur);
    border: 1px solid var(--glass-border);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.glass-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
    border-color: var(--primary-color);
}

/* Advanced Card Animations */
.advanced-card {
    position: relative;
    overflow: hidden;
}

.advanced-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.6s;
}

.advanced-card:hover::before {
    left: 100%;
}

/* Widget Icons */
.terminal-widget,
.playground-widget,
.voice-widget,
.collab-widget {
    position: fixed;
    bottom: 30px;
    width: 60px;
    height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    z-index: 1000;
    transition: var(--transition);
}

.terminal-widget {
    right: 30px;
}

.playground-widget {
    right: 110px;
}

.voice-widget {
    left: 30px;
}

.collab-widget {
    right: 190px;
}

.terminal-widget:hover,
.playground-widget:hover,
.voice-widget:hover,
.collab-widget:hover {
    transform: scale(1.1) rotate(10deg);
    background: var(--primary-color);
}

.terminal-widget i,
.playground-widget i,
.voice-widget i,
.collab-widget i {
    font-size: 28px;
    color: var(--text-color);
}

/* Achievement Notification */
.achievement-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 20px;
    display: none;
    align-items: center;
    gap: 15px;
    z-index: 1001;
    animation: slideInRight 0.5s ease, slideOutRight 0.5s ease 2.5s forwards;
}

.achievement-icon {
    font-size: 2rem;
    animation: bounce 2s infinite;
}

@keyframes slideInRight {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

@keyframes slideOutRight {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
}

/* Voice Feedback */
.voice-feedback {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 20px 40px;
    z-index: 10000;
    background: var(--primary-color);
    color: var(--bg-color);
    border-radius: var(--border-radius);
    display: none;
    animation: fadeOut 2s forwards;
}

@keyframes fadeOut {
    0% { opacity: 1; }
    70% { opacity: 1; }
    100% { opacity: 0; display: none; }
}

/* Enhanced Loading Screen */
.loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--secondary-color);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    transition: var(--transition);
}

.loading-content {
    text-align: center;
    padding: 3rem;
    animation: holographic 3s ease-in-out infinite;
}

@keyframes holographic {
    0%, 100% { 
        transform: translateY(0px) rotateX(0deg);
        box-shadow: 0 0 50px rgba(14, 239, 255, 0.3);
    }
    50% { 
        transform: translateY(-10px) rotateX(5deg);
        box-shadow: 0 0 80px rgba(14, 239, 255, 0.6);
    }
}

.loading-progress {
    width: 200px;
    height: 4px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
    margin: 20px auto;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background: var(--gradient);
    width: 0%;
    animation: loading 2s ease-in-out forwards;
}

@keyframes loading {
    0% { width: 0%; }
    100% { width: 100%; }
}

.loading-text {
    margin-top: 10px;
    font-size: 14px;
    opacity: 0.8;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
}

/* Enhanced Cursor */
.cursor {
    position: fixed;
    width: 8px;
    height: 8px;
    background: var(--primary-color);
    border-radius: 50%;
    pointer-events: none;
    z-index: 999;
    transition: transform 0.1s;
    mix-blend-mode: difference;
}

.cursor-follower {
    position: fixed;
    width: 40px;
    height: 40px;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    pointer-events: none;
    z-index: 998;
    transition: transform 0.2s, opacity 0.2s;
    mix-blend-mode: difference;
}

/* FIXED: Enhanced Header - No Movement on Hover */
.header {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    max-width: 1200px;
    padding: 20px 40px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 100;
    transition: var(--transition);
}

.logo {
    font-size: 28px;
    color: var(--text-color);
    text-decoration: none;
    font-weight: 700;
}

.logo span {
    color: var(--primary-color);
}

.navbar {
    display: flex;
}

.navbar a {
    font-size: 18px;
    color: var(--text-color);
    text-decoration: none;
    font-weight: 500;
    margin-left: 35px;
    transition: var(--transition);
    position: relative;
    padding: 8px 0;
    border-bottom: 2px solid transparent;
}

.navbar a:hover {
    color: var(--primary-color);
    border-bottom-color: var(--primary-color);
}

.menu-toggle {
    display: none;
    flex-direction: column;
    cursor: pointer;
}

.menu-toggle span {
    width: 25px;
    height: 3px;
    background-color: var(--text-color);
    margin: 3px 0;
    transition: var(--transition);
}

/* Parallax Sections */
.parallax-section {
    position: relative;
    overflow: hidden;
}

.parallax-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 120%;
    background-size: cover;
    background-position: center;
    transform: translateZ(0);
    will-change: transform;
    z-index: -1;
}

.about .parallax-bg {
    background: linear-gradient(45deg, rgba(14, 239, 255, 0.1), rgba(255, 77, 148, 0.1));
}

.skills .parallax-bg {
    background: linear-gradient(135deg, rgba(14, 239, 255, 0.05), rgba(255, 255, 255, 0.02));
}

.home .parallax-bg {
    background: linear-gradient(-45deg, rgba(14, 239, 255, 0.05), rgba(255, 77, 148, 0.05), rgba(14, 239, 255, 0.05));
    animation: gradient 15s ease infinite;
    background-size: 400% 400%;
}

@keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Enhanced Home Section */
.home {
    min-height: 100vh;
    display: flex;
    align-items: center;
    padding: 100px 10% 50px;
    position: relative;
}

.home-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.text-content h3 {
    font-size: 32px;
    font-weight: 700;
}

.text-content h1 {
    font-size: 56px;
    font-weight: 700;
    margin: -3px 0;
}

.text-content h3 span {
    color: var(--primary-color);
}

.text-content p {
    font-size: 16px;
    margin: 20px 0 40px;
}

.badge {
    display: inline-block;
    padding: 12px 24px;
    border-radius: 30px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 20px;
    animation: float 3s ease-in-out infinite;
}

@keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
}

.home-sci {
    display: flex;
    margin-bottom: 30px;
}

.home-sci a {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    text-decoration: none;
    margin-right: 15px;
    transition: var(--transition);
}

.cta-buttons {
    display: flex;
    gap: 15px;
    margin-top: 30px;
}

.btn-box {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 15px 30px;
    border-radius: 30px;
    text-decoration: none;
    font-weight: 600;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.btn-box.primary {
    background: var(--primary-color);
    color: var(--bg-color);
}

.btn-box.secondary {
    background: transparent;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
}

.btn-box.secondary:hover {
    background: var(--primary-color);
    color: var(--bg-color);
}

.btn-box::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
}

.btn-box:hover::before {
    left: 100%;
}

.home-img {
    position: relative;
}

.image-container {
    position: relative;
    width: 400px;
    height: 400px;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 0 25px var(--primary-color);
}

.image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.floating-element {
    position: absolute;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    animation: float 6s ease-in-out infinite;
}

.floating-element:nth-child(1) {
    top: 10%;
    left: 10%;
    animation-delay: 0s;
}

.floating-element:nth-child(2) {
    top: 20%;
    right: 10%;
    animation-delay: 1.5s;
}

.floating-element:nth-child(3) {
    bottom: 20%;
    left: 10%;
    animation-delay: 3s;
}

.floating-element:nth-child(4) {
    bottom: 10%;
    right: 10%;
    animation-delay: 4.5s;
}

/* Stats Container */
.stats-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
    margin-top: 50px;
    width: 100%;
}

.stat-item {
    text-align: center;
    padding: 40px 20px;
    transition: var(--transition);
}

.stat-number {
    font-size: 3rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 10px;
    text-shadow: 0 0 20px rgba(14, 239, 255, 0.5);
}

.stat-label {
    font-size: 1rem;
    color: var(--text-color);
    opacity: 0.8;
}

/* Enhanced Sections */
section {
    padding: 100px 0;
    position: relative;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.section-title {
    font-size: 4rem;
    text-align: center;
    margin-bottom: 60px;
    background: var(--gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: titleGlow 3s ease-in-out infinite;
}

@keyframes titleGlow {
    0%, 100% { text-shadow: 0 0 20px rgba(14, 239, 255, 0.5); }
    50% { text-shadow: 0 0 30px rgba(14, 239, 255, 0.8); }
}

/* About Section Enhancements */
.about-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 50px;
    align-items: center;
}

.about-img .image-wrapper {
    width: 100%;
    max-width: 400px;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 0 25px var(--primary-color);
    position: relative;
}

.about-img img {
    width: 100%;
    height: auto;
    display: block;
}

.experience-badge {
    position: absolute;
    bottom: 20px;
    right: -20px;
    padding: 20px;
    text-align: center;
    animation: pulse 2s infinite;
}

.about-text p {
    margin-bottom: 20px;
    line-height: 1.6;
}

.about-text p span {
    color: var(--primary-color);
    font-weight: 600;
}

.personal-info {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
    margin-top: 30px;
}

.info-item {
    display: flex;
    align-items: center;
    padding: 15px;
}

.info-item h3 {
    font-weight: 600;
    margin-right: 10px;
    min-width: 120px;
}

.info-item span {
    color: var(--primary-color);
}

/* Education Section */
.timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
}

.timeline::after {
    content: '';
    position: absolute;
    width: 6px;
    background-color: var(--primary-color);
    top: 0;
    bottom: 0;
    left: 50%;
    margin-left: -3px;
    border-radius: 10px;
}

.timeline-item {
    padding: 10px 40px;
    position: relative;
    width: 50%;
    box-sizing: border-box;
}

.timeline-item:nth-child(odd) {
    left: 0;
}

.timeline-item:nth-child(even) {
    left: 50%;
}

.timeline-content {
    padding: 30px;
    transition: var(--transition);
}

.timeline-content:hover {
    transform: translateY(-5px);
}

.timeline-date {
    display: inline-block;
    padding: 5px 15px;
    background-color: var(--primary-color);
    color: var(--bg-color);
    border-radius: 20px;
    font-weight: 600;
    margin-bottom: 10px;
}

.timeline-content h3 {
    color: var(--primary-color);
    margin-bottom: 5px;
}

.timeline-content h4 {
    margin-bottom: 10px;
    font-weight: 500;
}

.timeline-content p {
    line-height: 1.6;
}

/* Skills Section Enhancements */
.skills-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 50px;
}

.technical-skills,
.professional-skills {
    padding: 40px;
}

.technical-skills h3,
.professional-skills h3 {
    font-size: 24px;
    margin-bottom: 30px;
    color: var(--primary-color);
}

.skill-bar {
    margin-bottom: 20px;
}

.skill-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
}

.skill-progress {
    height: 12px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    overflow: hidden;
    margin-top: 10px;
}

.progress {
    height: 100%;
    border-radius: 10px;
    background: var(--gradient);
    position: relative;
    width: 0;
    transition: width 1.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.progress::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

.radial-skills {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 30px;
}

.radial-skill {
    text-align: center;
}

.radial-progress {
    position: relative;
    width: 120px;
    height: 120px;
    margin: 0 auto 15px;
    border-radius: 50%;
    background: conic-gradient(var(--primary-color) 0%, var(--card-bg) 0%);
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background 1.5s ease;
}

.radial-progress::before {
    content: '';
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: var(--bg-color);
    border-radius: 50%;
}

.radial-progress span {
    position: relative;
    font-weight: 600;
    color: var(--text-color);
}

.radial-skill h4 {
    font-size: 16px;
    font-weight: 500;
}

/* Skill Tree */
.skill-tree {
    padding: 30px;
    margin-top: 40px;
}

.skill-path {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: 20px;
}

.skill-node {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--glass-bg);
    border: 2px solid var(--glass-border);
    transition: var(--transition);
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.skill-node::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background: var(--primary-color);
    transition: height 0.3s ease;
}

.skill-node[data-level="1"]::before { height: 20%; }
.skill-node[data-level="2"]::before { height: 40%; }
.skill-node[data-level="3"]::before { height: 60%; }
.skill-node[data-level="4"]::before { height: 80%; }
.skill-node[data-level="5"]::before { height: 100%; }

.skill-node:hover {
    transform: scale(1.1);
    border-color: var(--primary-color);
}

.skill-node span {
    position: relative;
    z-index: 1;
    font-weight: 600;
    font-size: 12px;
    text-align: center;
}

.skill-connector {
    width: 40px;
    height: 2px;
    background: var(--glass-border);
    transition: var(--transition);
}

.skill-node:hover ~ .skill-connector {
    background: var(--primary-color);
}

/* Projects Grid */
.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 40px;
}

.project-card {
    overflow: hidden;
    transition: var(--transition);
}

.project-card:hover {
    transform: translateY(-15px) scale(1.02);
}

.project-image {
    position: relative;
    overflow: hidden;
    height: 250px;
}

.project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: var(--transition);
}

.project-card:hover .project-image img {
    transform: scale(1.1);
}

.project-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: var(--transition);
}

.project-card:hover .project-overlay {
    opacity: 1;
}

.project-links {
    display: flex;
    gap: 15px;
}

.project-link {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    color: var(--bg-color);
    font-size: 20px;
    text-decoration: none;
    transition: var(--transition);
}

.project-link:hover {
    transform: scale(1.1);
    box-shadow: 0 0 15px var(--primary-color);
}

.project-content {
    padding: 25px;
}

.project-content h3 {
    font-size: 20px;
    margin-bottom: 10px;
}

.project-content p {
    margin-bottom: 15px;
    font-size: 14px;
    line-height: 1.6;
}

.project-tech {
    display: flex;
    gap: 8px;
    margin: 15px 0;
    flex-wrap: wrap;
}

.tech-tag {
    padding: 5px 12px;
    border-radius: 15px;
    font-size: 0.8rem;
    border: 1px solid rgba(14, 239, 255, 0.3);
}

/* Contact Section */
.contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 50px;
}

.contact-info h3 {
    font-size: 24px;
    margin-bottom: 20px;
    color: var(--primary-color);
}

.contact-info p {
    margin-bottom: 30px;
    line-height: 1.6;
}

.contact-details {
    margin-bottom: 30px;
}

.contact-item {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

.contact-item i {
    font-size: 24px;
    color: var(--primary-color);
    margin-right: 15px;
}

.contact-item h4 {
    font-size: 18px;
    margin-bottom: 5px;
}

.social-links {
    display: flex;
    gap: 15px;
}

.social-links a {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    text-decoration: none;
    transition: var(--transition);
}

.social-links a:hover {
    background-color: var(--primary-color);
    color: var(--bg-color);
    transform: translateY(-5px);
}

.form-group {
    margin-bottom: 20px;
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: 15px 20px;
    border-radius: var(--border-radius);
    border: 1px solid var(--glass-border);
    background: var(--glass-bg);
    color: var(--text-color);
    font-size: 16px;
    transition: var(--transition);
    backdrop-filter: var(--blur);
}

.form-group input:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 20px rgba(14, 239, 255, 0.3);
}

.form-group textarea {
    resize: vertical;
    min-height: 150px;
}

/* Footer */
.footer {
    background-color: var(--card-bg);
    padding: 50px 0 20px;
    text-align: center;
}

.footer p {
    margin-bottom: 30px;
    line-height: 1.6;
}

.footer-bottom {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 20px;
}

/* Terminal Modal */
.terminal-modal,
.playground-modal,
.collab-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.9);
    width: 90%;
    max-width: 800px;
    height: 70vh;
    background: var(--secondary-color);
    border-radius: var(--border-radius);
    z-index: 1002;
    display: none;
    overflow: hidden;
    box-shadow: 0 0 100px rgba(0, 0, 0, 0.5);
}

.terminal-modal.active,
.playground-modal.active,
.collab-modal.active {
    display: block;
    animation: modalAppear 0.3s ease forwards;
}

@keyframes modalAppear {
    to {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
    }
}

.terminal-header,
.playground-header,
.collab-header {
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--glass-border);
}

.terminal-body {
    height: calc(100% - 70px);
    padding: 20px;
    font-family: 'Courier New', monospace;
    background: #1a1a1a;
    color: #00ff00;
    overflow-y: auto;
}

.terminal-output {
    margin-bottom: 20px;
}

.terminal-line {
    margin-bottom: 5px;
}

.terminal-input {
    display: flex;
    align-items: center;
}

.prompt {
    color: #00ff00;
    margin-right: 10px;
}

#terminal-input {
    background: transparent;
    border: none;
    color: #00ff00;
    font-family: 'Courier New', monospace;
    font-size: 16px;
    width: 100%;
    outline: none;
}

/* Playground Modal */
.playground-body {
    height: calc(100% - 70px);
    display: grid;
    grid-template-columns: 2fr 1fr;
}

.code-editors {
    display: flex;
    flex-direction: column;
    border-right: 1px solid var(--glass-border);
}

.editor-section {
    flex: 1;
    display: flex;
    flex-direction:column;
}

.editor-header {
    padding: 10px 20px;
    background: rgba(0, 0, 0, 0.2);
    font-weight: 600;
}

.code-editor {
    flex: 1;
    background: #1e1e1e;
    color: #d4d4d4;
    border: none;
    padding: 15px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    resize: none;
    outline: none;
}

.preview-section {
    display: flex;
    flex-direction: column;
}

.preview-header {
    padding: 10px 20px;
    background: rgba(0, 0, 0, 0.2);
    font-weight: 600;
}

.code-preview {
    flex: 1;
    border: none;
    background: white;
}

/* Collaboration Modal */
.collab-body {
    height: calc(100% - 70px);
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 20px;
    padding: 20px;
}

.user-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.user {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    border-radius: var(--border-radius);
    background: var(--glass-bg);
}

.user.active {
    background: var(--primary-color);
    color: var(--bg-color);
}

.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--glass-border);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.collab-editor {
    flex: 1;
}

.collab-editor textarea {
    width: 100%;
    height: 200px;
    background: #1e1e1e;
    color: #d4d4d4;
    border: none;
    padding: 15px;
    border-radius: var(--border-radius);
    resize: none;
    font-family: 'Courier New', monospace;
}

.collab-chat {
    grid-column: 1 / -1;
    height: 200px;
    display: flex;
    flex-direction: column;
    background: var(--glass-bg);
    border-radius: var(--border-radius);
    overflow: hidden;
}

.collab-chat .message {
    padding: 10px 15px;
    border-bottom: 1px solid var(--glass-border);
}

.collab-chat .user-message {
    background: rgba(14, 239, 255, 0.1);
}

.collab-chat input {
    border: none;
    padding: 15px;
    background: transparent;
    color: var(--text-color);
    outline: none;
}

/* Back to Top */
.back-to-top {
    position: fixed;
    bottom: 30px;
    left: 110px;
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    opacity: 0;
    visibility: hidden;
    transition: var(--transition);
    z-index: 99;
}

.back-to-top.active {
    opacity: 1;
    visibility: visible;
}

.back-to-top:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

/* Loading state for buttons */
.btn-loading {
    position: relative;
    color: transparent;
}

.btn-loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 768px) {
    .header {
        top: 10px;
        padding: 15px 20px;
    }
    
    .section-title {
        font-size: 2.5rem;
    }
    
    .stats-container {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }
    
    .about-content {
        grid-template-columns: 1fr;
        text-align: center;
    }
    
    .skills-content {
        grid-template-columns: 1fr;
    }
    
    .projects-grid {
        grid-template-columns: 1fr;
    }
    
    .contact-content {
        grid-template-columns: 1fr;
    }
    
    .terminal-modal,
    .playground-modal,
    .collab-modal {
        width: 95%;
        height: 80vh;
    }
    
    .playground-body {
        grid-template-columns: 1fr;
        grid-template-rows: 2fr 1fr;
    }
    
    .collab-body {
        grid-template-columns: 1fr;
        grid-template-rows: auto 1fr auto;
    }
    
    .navbar {
        position: fixed;
        top: 0;
        right: -100%;
        width: 70%;
        height: 100vh;
        background-color: var(--bg-color);
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transition: var(--transition);
        z-index: 99;
    }
    
    .navbar.active {
        right: 0;
    }
    
    .navbar a {
        margin: 15px 0;
        font-size: 20px;
    }
    
    .menu-toggle {
        display: flex;
        z-index: 100;
    }
    
    .menu-toggle.active span:nth-child(1) {
        transform: rotate(45deg) translate(5px, 5px);
    }
    
    .menu-toggle.active span:nth-child(2) {
        opacity: 0;
    }
    
    .menu-toggle.active span:nth-child(3) {
        transform: rotate(-45deg) translate(7px, -6px);
    }
    
    .timeline::after {
        left: 31px;
    }
    
    .timeline-item {
        width: 100%;
        padding-left: 70px;
        padding-right: 25px;
    }
    
    .timeline-item:nth-child(even) {
        left: 0;
    }
    
    .radial-skills {
        grid-template-columns: 1fr;
    }
    
    .skill-path {
        flex-direction: column;
    }
    
    .skill-connector {
        width: 2px;
        height: 40px;
    }
    
    /* Adjust widget positions for mobile */
    .terminal-widget { right: 20px; bottom: 20px; }
    .playground-widget { right: 90px; bottom: 20px; }
    .collab-widget { right: 160px; bottom: 20px; }
    .voice-widget { left: 20px; bottom: 20px; }
    .back-to-top { left: 20px; bottom: 90px; }
}

@media (max-width: 480px) {
    .home-content h1 {
        font-size: 40px;
    }
    
    .home-content h3 {
        font-size: 24px;
    }
    
    .image-container {
        width: 300px;
        height: 300px;
    }
    
    .cta-buttons {
        flex-direction: column;
    }
    
    .personal-info {
        grid-template-columns: 1fr;
    }
    
    .skill-node {
        width: 60px;
        height: 60px;
    }
    
    .skill-node span {
        font-size: 10px;
    }
}

/* Add to style.css */

/* AI Chat Assistant */
.ai-assistant-widget {
    position: fixed;
    bottom: 30px;
    left: 110px;
    width: 60px;
    height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    z-index: 1000;
    transition: var(--transition);
    background: linear-gradient(135deg, #667eea, #764ba2);
}

.ai-chat-modal {
    position: fixed;
    bottom: 100px;
    right: 30px;
    width: 350px;
    height: 500px;
    display: none;
    flex-direction: column;
    z-index: 1002;
}

.ai-chat-modal.active {
    display: flex;
}

.ai-chat-body {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 20px;
}

.ai-messages {
    flex: 1;
    overflow-y: auto;
    margin-bottom: 15px;
}

.ai-message {
    padding: 10px 15px;
    margin: 10px 0;
    border-radius: 15px;
    max-width: 80%;
}

.bot-message {
    background: var(--glass-bg);
    align-self: flex-start;
}

.user-message {
    background: var(--primary-color);
    color: var(--bg-color);
    align-self: flex-end;
}

.ai-input-container {
    display: flex;
    gap: 10px;
}

#ai-input {
    flex: 1;
    padding: 12px;
    border-radius: 20px;
    border: 1px solid var(--glass-border);
    background: var(--glass-bg);
    color: var(--text-color);
}

#send-ai {
    padding: 12px;
    border-radius: 50%;
    background: var(--primary-color);
    color: var(--bg-color);
    border: none;
    cursor: pointer;
}

/* Crypto Ticker */
.crypto-ticker {
    position: fixed;
    top: 20px;
    left: 20px;
    padding: 15px 25px;
    z-index: 1000;
}

.ticker-content {
    display: flex;
    align-items: center;
    gap: 15px;
}

.crypto-prices {
    display: flex;
    gap: 20px;
    font-size: 14px;
}

.crypto-prices span {
    font-family: 'Courier New', monospace;
    font-weight: 600;
}

/* Weather Widget */
.weather-widget {
    position: fixed;
    top: 20px;
    right: 280px;
    padding: 15px;
    z-index: 1000;
}

.weather-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.weather-data {
    display: flex;
    flex-direction: column;
}

.temp {
    font-size: 18px;
    font-weight: 600;
}

.location {
    font-size: 12px;
    opacity: 0.8;
}

/* 3D Model Viewer */
.model-viewer-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80vw;
    height: 80vh;
    display: none;
    z-index: 1002;
}

.model-viewer-modal.active {
    display: block;
}

#3d-canvas {
    width: 100%;
    height: 100%;
    border-radius: var(--border-radius);
}

.viewer-controls {
    position: absolute;
    bottom: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
}

.viewer-controls button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background: var(--glass-bg);
    color: var(--text-color);
    cursor: pointer;
    backdrop-filter: var(--blur);
}

/* Live Cursors */
.live-cursors {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 999;
}

.live-cursor {
    position: absolute;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    pointer-events: none;
    z-index: 1000;
}

/* AR Preview */
.ar-preview-widget {
    position: fixed;
    bottom: 110px;
    left: 30px;
    width: 60px;
    height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    z-index: 1000;
    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
}

/* Typing indicator */
.typing-indicator {
    display: inline-flex;
    gap: 3px;
    padding: 10px 15px;
    background: var(--glass-bg);
    border-radius: 15px;
}

.typing-dot {
    width: 8px;
    height: 8px;
    background: var(--text-color);
    border-radius: 50%;
    animation: typing 1.4s infinite;
}

.typing-dot:nth-child(2) { animation-delay: 0.2s; }
.typing-dot:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-10px); }
}

/* Pulse animation for new features */
@keyframes feature-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); box-shadow: 0 0 30px var(--primary-color); }
}

.new-feature {
    animation: feature-pulse 2s infinite;
}





#script.js
// script.js - Complete Enhanced Version with All Interactive Features
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Enhanced Portfolio Initialized');
    
    // Initialize all features
    initParticleSystem();
    init3DBackground();
    initTypedJS();
    initLoadingScreen();
    initThemeToggle();
    initCustomCursor();
    initTerminal();
    initPlayground();
    initVoiceCommands();
    initCollaborativeDemo();
    initSkillTree();
    initReadingProgress();
    initParallaxEffects();
    initLazyLoading();
    initScrollAnimations();
    initFormHandling();
    initMobileMenu();
    initNewFeatures(); // New features initialization
    initBackToTop();
    
    console.log('üéâ All features initialized successfully!');
});

// Particle System Background
function initParticleSystem() {
    const canvas = document.getElementById('particle-canvas');
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const particleCount = 100;

    class Particle {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.size = Math.random() * 3 + 1;
            this.speedX = Math.random() * 1 - 0.5;
            this.speedY = Math.random() * 1 - 0.5;
            this.color = `hsl(${Math.random() * 360}, 70%, 60%)`;
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;

            if (this.x > canvas.width) this.x = 0;
            else if (this.x < 0) this.x = canvas.width;
            if (this.y > canvas.height) this.y = 0;
            else if (this.y < 0) this.y = canvas.height;
        }

        draw() {
            ctx.fillStyle = this.color;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    function createParticles() {
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }
    }

    function connectParticles() {
        for (let a = 0; a < particles.length; a++) {
            for (let b = a; b < particles.length; b++) {
                const dx = particles[a].x - particles[b].x;
                const dy = particles[a].y - particles[b].y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < 100) {
                    ctx.strokeStyle = `rgba(14, 239, 255, ${0.2 * (1 - distance/100)})`;
                    ctx.lineWidth = 0.5;
                    ctx.beginPath();
                    ctx.moveTo(particles[a].x, particles[a].y);
                    ctx.lineTo(particles[b].x, particles[b].y);
                    ctx.stroke();
                }
            }
        }
    }

    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach(particle => {
            particle.update();
            particle.draw();
        });
        
        connectParticles();
        requestAnimationFrame(animate);
    }

    createParticles();
    animate();

    // Interactive mouse effects
    let mouseX = 0;
    let mouseY = 0;
    let mouseRadius = 100;

    canvas.addEventListener('mousemove', (e) => {
        mouseX = e.x;
        mouseY = e.y;
    });

    // Add mouse interaction to particles
    setInterval(() => {
        particles.forEach(particle => {
            const dx = mouseX - particle.x;
            const dy = mouseY - particle.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < mouseRadius) {
                particle.speedX = dx * 0.05;
                particle.speedY = dy * 0.05;
            }
        });
    }, 100);

    // Handle resize
    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
}

// 3D Background Implementation
function init3DBackground() {
    if (typeof THREE === 'undefined') {
        console.warn('Three.js not loaded, skipping 3D background');
        return;
    }

    try {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true,
            powerPreference: "high-performance"
        });
        
        const container = document.getElementById('three-bg');
        if (!container) return;
        
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000, 0);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        container.appendChild(renderer.domElement);
        
        // Create floating geometry
        const geometries = [
            new THREE.IcosahedronGeometry(1, 0),
            new THREE.OctahedronGeometry(1, 0),
            new THREE.TetrahedronGeometry(1, 0),
            new THREE.SphereGeometry(1, 5, 5)
        ];
        
        const materials = [
            new THREE.MeshPhongMaterial({ 
                color: 0x0ef, 
                transparent: true, 
                opacity: 0.6,
                shininess: 100 
            }),
            new THREE.MeshPhongMaterial({ 
                color: 0xff4d94, 
                transparent: true, 
                opacity: 0.6,
                shininess: 100 
            })
        ];
        
        const objects = [];
        const objectCount = 12;
        
        for (let i = 0; i < objectCount; i++) {
            const geometry = geometries[Math.floor(Math.random() * geometries.length)];
            const material = materials[Math.floor(Math.random() * materials.length)];
            const mesh = new THREE.Mesh(geometry, material.clone());
            
            mesh.position.x = Math.random() * 40 - 20;
            mesh.position.y = Math.random() * 40 - 20;
            mesh.position.z = Math.random() * 40 - 20;
            
            mesh.rotation.x = Math.random() * Math.PI;
            mesh.rotation.y = Math.random() * Math.PI;
            
            mesh.userData = {
                speed: {
                    x: (Math.random() - 0.5) * 0.01,
                    y: (Math.random() - 0.5) * 0.01,
                    z: (Math.random() - 0.5) * 0.01
                },
                rotation: {
                    x: (Math.random() - 0.5) * 0.01,
                    y: (Math.random() - 0.5) * 0.01
                }
            };
            
            scene.add(mesh);
            objects.push(mesh);
        }
        
        // Add optimized lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);
        
        camera.position.z = 30;
        
        // Animation with frame rate control
        let then = 0;
        function animate(now) {
            requestAnimationFrame(animate);
            
            now *= 0.001;
            const delta = now - then;
            then = now;
            
            objects.forEach(obj => {
                obj.position.x += obj.userData.speed.x * delta * 60;
                obj.position.y += obj.userData.speed.y * delta * 60;
                obj.position.z += obj.userData.speed.z * delta * 60;
                
                obj.rotation.x += obj.userData.rotation.x * delta * 60;
                obj.rotation.y += obj.userData.rotation.y * delta * 60;
                
                // Bounce off boundaries
                if (Math.abs(obj.position.x) > 25) obj.userData.speed.x *= -1;
                if (Math.abs(obj.position.y) > 25) obj.userData.speed.y *= -1;
                if (Math.abs(obj.position.z) > 25) obj.userData.speed.z *= -1;
            });
            
            // Gentle camera movement
            camera.position.x = Math.sin(now * 0.1) * 3;
            camera.position.y = Math.cos(now * 0.1) * 3;
            camera.lookAt(scene.position);
            
            renderer.render(scene, camera);
        }
        
        animate(0);
        
        // Optimized resize handler
        let resizeTimeout;
        function handleResize() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }, 250);
        }
        
        window.addEventListener('resize', handleResize);
    } catch (error) {
        console.warn('3D Background initialization failed:', error);
    }
}

// Typed.js Initialization
function initTypedJS() {
    try {
        const typedElement = document.querySelector(".text");
        if (typedElement && typeof Typed !== 'undefined') {
            new Typed(".text", {
                strings: ["Full Stack Developer", "UI/UX Designer", "Tech Innovator", "Problem Solver"],
                typeSpeed: 80,
                backSpeed: 50,
                backDelay: 1500,
                loop: true,
                showCursor: true,
                cursorChar: "|"
            });
        }
    } catch (error) {
        console.warn('Typed.js initialization failed:', error);
    }
}

// Loading Screen Management
function initLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (!loadingScreen) return;
    
    function hideLoadingScreen() {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
            unlockAchievement('portfolioViewed');
        }, 500);
    }

    let progress = 0;
    const progressBar = document.querySelector('.progress-bar');
    
    if (progressBar) {
        const progressInterval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100) {
                progress = 100;
                clearInterval(progressInterval);
                setTimeout(hideLoadingScreen, 500);
            }
            progressBar.style.width = `${progress}%`;
        }, 200);

        setTimeout(hideLoadingScreen, 3000);
    } else {
        hideLoadingScreen();
    }
}

// Theme Toggle with localStorage
function initThemeToggle() {
    const themeToggle = document.querySelector('.theme-toggle');
    const themeIcon = document.getElementById('theme-icon');
    
    const savedTheme = localStorage.getItem('portfolio-theme');
    let isDarkMode = savedTheme ? savedTheme === 'dark' : true;

    function applyTheme() {
        document.body.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
        if (themeIcon) {
            themeIcon.className = isDarkMode ? 'bx bx-moon' : 'bx bx-sun';
        }
        localStorage.setItem('portfolio-theme', isDarkMode ? 'dark' : 'light');
    }

    applyTheme();

    if (themeToggle) {
        themeToggle.addEventListener('click', function() {
            isDarkMode = !isDarkMode;
            applyTheme();
            unlockAchievement('themeChanged');
        });
    }
}

// Enhanced Custom Cursor
function initCustomCursor() {
    const cursor = document.querySelector('.cursor');
    const cursorFollower = document.querySelector('.cursor-follower');
    
    if (!cursor || !cursorFollower) return;

    let mouseX = 0, mouseY = 0;
    let followerX = 0, followerY = 0;

    function handleMouseMove(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        cursor.style.left = mouseX + 'px';
        cursor.style.top = mouseY + 'px';
    }

    function animateFollower() {
        followerX += (mouseX - followerX) * 0.1;
        followerY += (mouseY - followerY) * 0.1;
        
        cursorFollower.style.left = followerX + 'px';
        cursorFollower.style.top = followerY + 'px';
        
        requestAnimationFrame(animateFollower);
    }

    document.addEventListener('mousemove', handleMouseMove);
    animateFollower();

    const interactiveElements = document.querySelectorAll('a, button, .btn-box, .project-card, .glass-card, input, textarea');
    
    interactiveElements.forEach(element => {
        element.addEventListener('mouseenter', function() {
            cursor.style.transform = 'scale(1.5)';
            cursorFollower.style.transform = 'scale(1.5)';
            cursorFollower.style.background = 'rgba(14, 239, 255, 0.1)';
        });
        
        element.addEventListener('mouseleave', function() {
            cursor.style.transform = 'scale(1)';
            cursorFollower.style.transform = 'scale(1)';
            cursorFollower.style.background = 'transparent';
        });
    });

    document.addEventListener('mouseleave', () => {
        cursor.style.opacity = '0';
        cursorFollower.style.opacity = '0';
    });
    
    document.addEventListener('mouseenter', () => {
        cursor.style.opacity = '1';
        cursorFollower.style.opacity = '1';
    });
}

// Terminal Functionality
function initTerminal() {
    const terminalWidget = document.querySelector('.terminal-widget');
    const terminalModal = document.getElementById('terminal-modal');
    const closeTerminal = document.getElementById('close-terminal');
    const terminalInput = document.getElementById('terminal-input');
    const terminalOutput = document.getElementById('terminal-output');

    const commands = {
        help: () => `Available commands: about, skills, projects, contact, clear, theme, achievements, date, echo`,
        about: () => `I'm Ritek Mehta, a passionate developer from India. Currently pursuing MCA and building amazing projects!`,
        skills: () => `Technical: HTML, CSS, JavaScript, Java, Python, MySQL | Professional: Creativity, Communication, Problem Solving`,
        projects: () => `Hospital Management System, Pac-Man AI Game, Smart-Tracker App, Portfolio Website`,
        contact: () => `Email: rm7566760@gmail.com | Phone: +91 7500760585 | LinkedIn: Ritek Mehta`,
        clear: () => { if (terminalOutput) terminalOutput.innerHTML = ''; return ''; },
        theme: () => { document.querySelector('.theme-toggle')?.click(); return 'Theme toggled!'; },
        achievements: () => `Unlocked: ${Object.keys(achievements).filter(a => achievements[a].unlocked).length} achievements`,
        date: () => new Date().toString(),
        echo: (args) => args.join(' ') || 'Usage: echo [message]'
    };

    if (terminalWidget && terminalModal) {
        terminalWidget.addEventListener('click', function() {
            terminalModal.classList.add('active');
            if (terminalInput) terminalInput.focus();
            unlockAchievement('terminalOpened');
        });

        closeTerminal.addEventListener('click', function() {
            terminalModal.classList.remove('active');
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && terminalModal.classList.contains('active')) {
                terminalModal.classList.remove('active');
            }
        });

        if (terminalInput && terminalOutput) {
            terminalInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    const input = this.value.trim();
                    const [command, ...args] = input.split(' ');
                    this.value = '';
                    
                    const userInputLine = document.createElement('div');
                    userInputLine.className = 'terminal-line';
                    userInputLine.textContent = `visitor@portfolio:~$ ${input}`;
                    terminalOutput.appendChild(userInputLine);
                    
                    let output = 'Command not found. Type "help" for available commands.';
                    if (commands[command]) {
                        output = commands[command](args);
                    } else if (input) {
                        output = `Command '${command}' not found. Type "help" for available commands.`;
                    } else {
                        output = '';
                    }
                    
                    if (output) {
                        const outputLine = document.createElement('div');
                        outputLine.className = 'terminal-line';
                        outputLine.textContent = output;
                        terminalOutput.appendChild(outputLine);
                    }
                    
                    terminalOutput.scrollTop = terminalOutput.scrollHeight;
                }
            });
        }
    }
}

// Live Code Playground
function initPlayground() {
    const playgroundWidget = document.querySelector('.playground-widget');
    const playgroundModal = document.getElementById('playground-modal');
    const closePlayground = document.getElementById('close-playground');
    const runCode = document.getElementById('run-code');
    const resetCode = document.getElementById('reset-code');

    if (playgroundWidget && playgroundModal) {
        playgroundWidget.addEventListener('click', function() {
            playgroundModal.classList.add('active');
            unlockAchievement('playgroundOpened');
        });

        closePlayground.addEventListener('click', function() {
            playgroundModal.classList.remove('active');
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && playgroundModal.classList.contains('active')) {
                playgroundModal.classList.remove('active');
            }
        });

        if (runCode) {
            runCode.addEventListener('click', function() {
                executeCode();
                unlockAchievement('codeExecuted');
            });
        }

        if (resetCode) {
            resetCode.addEventListener('click', function() {
                const defaultHTML = `<!DOCTYPE html>
<html>
<head>
    <title>My Playground</title>
</head>
<body>
    <h1>Hello, I'm Ritek!</h1>
    <div id="demo">Welcome to my code playground</div>
</body>
</html>`;
                
                const defaultCSS = `body {
    font-family: Arial, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
    padding: 50px;
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

h1 {
    color: #0ef;
    text-shadow: 0 0 10px rgba(14, 239, 255, 0.5);
    margin-bottom: 20px;
}

#demo {
    background: rgba(255,255,255,0.1);
    padding: 20px;
    border-radius: 10px;
    backdrop-filter: blur(10px);
    cursor: pointer;
    transition: all 0.3s ease;
    max-width: 400px;
}`;
                
                const defaultJS = `document.getElementById('demo').addEventListener('click', function() {
    this.style.transform = 'scale(1.1)';
    this.style.background = 'rgba(14, 239, 255, 0.2)';
    setTimeout(() => {
        this.style.transform = 'scale(1)';
        this.style.background = 'rgba(255,255,255,0.1)';
    }, 300);
});

// Typewriter effect
const text = "Built with passion by Ritek Mehta";
let i = 0;
const demoElement = document.getElementById('demo');
const originalText = demoElement.innerHTML;

function typeWriter() {
    if (i < text.length) {
        demoElement.innerHTML = originalText + '<br>' + text.substring(0, i + 1);
        i++;
        setTimeout(typeWriter, 50);
    }
}

// Start typewriter after a short delay
setTimeout(typeWriter, 1000);`;

                const htmlEditor = document.getElementById('html-editor');
                const cssEditor = document.getElementById('css-editor');
                const jsEditor = document.getElementById('js-editor');
                
                if (htmlEditor) htmlEditor.value = defaultHTML;
                if (cssEditor) cssEditor.value = defaultCSS;
                if (jsEditor) jsEditor.value = defaultJS;
                
                executeCode();
            });
        }

        function executeCode() {
            const htmlCode = document.getElementById('html-editor')?.value || '';
            const cssCode = document.getElementById('css-editor')?.value || '';
            const jsCode = document.getElementById('js-editor')?.value || '';
            
            const preview = document.getElementById('code-preview');
            if (!preview) return;
            
            const previewDocument = preview.contentDocument || preview.contentWindow.document;
            
            try {
                previewDocument.open();
                previewDocument.write(`
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <style>${cssCode}</style>
                    </head>
                    <body>
                        ${htmlCode}
                        <script>
                            try {
                                ${jsCode}
                            } catch (error) {
                                console.error('Playground error:', error);
                                document.body.innerHTML += '<div style="color: red; padding: 10px; background: rgba(255,0,0,0.1); margin: 10px; border-radius: 5px;">JavaScript Error: ' + error.message + '</div>';
                            }
                        <\/script>
                    </body>
                    </html>
                `);
                previewDocument.close();
            } catch (error) {
                console.error('Playground execution error:', error);
            }
        }

        setTimeout(executeCode, 1000);
    }
}

// Voice Command System
function initVoiceCommands() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (!SpeechRecognition) {
        console.log('Speech recognition not supported');
        showVoiceFeedback('Voice commands not supported in this browser');
        return;
    }

    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    const voiceCommands = {
        'home': () => scrollToSection('home'),
        'about': () => scrollToSection('about'),
        'skills': () => scrollToSection('skills'),
        'projects': () => scrollToSection('project'),
        'contact': () => scrollToSection('contact'),
        'terminal': () => document.querySelector('.terminal-widget')?.click(),
        'playground': () => document.querySelector('.playground-widget')?.click(),
        'code editor': () => document.querySelector('.playground-widget')?.click(),
        'dark mode': () => document.querySelector('.theme-toggle')?.click(),
        'light mode': () => document.querySelector('.theme-toggle')?.click(),
        'theme': () => document.querySelector('.theme-toggle')?.click(),
        'resume': () => window.open('https://drive.google.com/file/d/1_nfkwwYTqTh0qEEf_Gi6vE6dCxY_bPXr/view?usp=sharing', '_blank'),
        'download': () => window.open('https://drive.google.com/file/d/1_nfkwwYTqTh0qEEf_Gi6vE6dCxY_bPXr/view?usp=sharing', '_blank'),
        'hire': () => scrollToSection('contact'),
        'work': () => scrollToSection('contact'),
        'collaborate': () => document.querySelector('.collab-widget')?.click(),
        'collaboration': () => document.querySelector('.collab-widget')?.click(),
        'back to top': () => window.scrollTo({ top: 0, behavior: 'smooth' }),
        'top': () => window.scrollTo({ top: 0, behavior: 'smooth' }),
        'scroll up': () => window.scrollTo({ top: 0, behavior: 'smooth' })
    };

    const commandKeywords = {
        'home': ['home', 'main', 'start', 'beginning'],
        'about': ['about', 'about me', 'who are you', 'introduction', 'bio'],
        'skills': ['skills', 'technologies', 'what can you do', 'abilities'],
        'projects': ['projects', 'work', 'portfolio', 'show me your work', 'what have you built'],
        'contact': ['contact', 'get in touch', 'hire', 'email', 'phone', 'reach out'],
        'terminal': ['terminal', 'command', 'commands', 'console'],
        'playground': ['playground', 'code editor', 'editor', 'try code'],
        'theme': ['theme', 'dark', 'light', 'mode', 'appearance'],
        'resume': ['resume', 'cv', 'download', 'curriculum vitae'],
        'collaborate': ['collaborate', 'collaboration', 'work together']
    };

    function scrollToSection(sectionId) {
        document.getElementById(sectionId)?.scrollIntoView({ behavior: 'smooth' });
    }

    let isListening = false;
    let finalTranscript = '';
    let timeoutId;

    recognition.onstart = () => {
        console.log('Voice recognition started');
        isListening = true;
        showVoiceFeedback('üé§ Listening... Speak now!', 'listening');
    };

    recognition.onresult = (event) => {
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript;
            if (event.results[i].isFinal) {
                finalTranscript += transcript + ' ';
                processCommand(finalTranscript.trim());
                finalTranscript = '';
            } else {
                interimTranscript += transcript;
            }
        }

        if (interimTranscript) {
            showVoiceFeedback(`üé§ Listening: "${interimTranscript}"`, 'interim');
        }
    };

    recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        if (event.error === 'no-speech') {
            showVoiceFeedback('No speech detected. Try again.', 'error');
        } else if (event.error === 'audio-capture') {
            showVoiceFeedback('No microphone found. Please check your microphone.', 'error');
        } else if (event.error === 'not-allowed') {
            showVoiceFeedback('Microphone permission denied. Please allow microphone access.', 'error');
        }
        
        setTimeout(() => {
            if (isListening) {
                try {
                    recognition.start();
                } catch (e) {
                    console.log('Recognition restart failed:', e);
                }
            }
        }, 1000);
    };

    recognition.onend = () => {
        console.log('Voice recognition ended');
        if (isListening) {
            setTimeout(() => {
                try {
                    recognition.start();
                } catch (e) {
                    console.log('Recognition restart failed:', e);
                }
            }, 500);
        }
    };

    function processCommand(transcript) {
        console.log('Processing command:', transcript);
        
        const lowerTranscript = transcript.toLowerCase().trim();
        
        if (voiceCommands[lowerTranscript]) {
            voiceCommands[lowerTranscript]();
            showVoiceFeedback(`‚úÖ Executed: "${transcript}"`, 'success');
            unlockAchievement('voiceCommandUsed');
            return;
        }

        let commandExecuted = false;
        
        for (const [command, keywords] of Object.entries(commandKeywords)) {
            for (const keyword of keywords) {
                if (lowerTranscript.includes(keyword)) {
                    if (voiceCommands[command]) {
                        voiceCommands[command]();
                        showVoiceFeedback(`‚úÖ Heard "${keyword}" - Executed: ${command}`, 'success');
                        commandExecuted = true;
                        unlockAchievement('voiceCommandUsed');
                        break;
                    }
                }
            }
            if (commandExecuted) break;
        }

        if (!commandExecuted) {
            if (lowerTranscript.includes('go to') || lowerTranscript.includes('navigate to') || lowerTranscript.includes('show me')) {
                if (lowerTranscript.includes('home')) {
                    scrollToSection('home');
                    showVoiceFeedback('‚úÖ Going to Home section', 'success');
                    commandExecuted = true;
                } else if (lowerTranscript.includes('about')) {
                    scrollToSection('about');
                    showVoiceFeedback('‚úÖ Going to About section', 'success');
                    commandExecuted = true;
                } else if (lowerTranscript.includes('skill')) {
                    scrollToSection('skills');
                    showVoiceFeedback('‚úÖ Going to Skills section', 'success');
                    commandExecuted = true;
                } else if (lowerTranscript.includes('project')) {
                    scrollToSection('project');
                    showVoiceFeedback('‚úÖ Going to Projects section', 'success');
                    commandExecuted = true;
                } else if (lowerTranscript.includes('contact')) {
                    scrollToSection('contact');
                    showVoiceFeedback('‚úÖ Going to Contact section', 'success');
                    commandExecuted = true;
                }
            }
        }

        if (!commandExecuted) {
            showVoiceFeedback(`‚ùì Unknown command: "${transcript}"`, 'error');
        }
    }

    const voiceWidget = document.querySelector('.voice-widget');
    if (!voiceWidget) return;

    voiceWidget.addEventListener('click', () => {
        if (!isListening) {
            try {
                recognition.start();
                voiceWidget.style.background = 'var(--primary-color)';
                voiceWidget.innerHTML = '<i class="bx bx-microphone"></i><div class="pulse-ring"></div>';
                showVoiceFeedback('üé§ Voice commands activated! Try saying "go to about" or "open terminal"', 'info');
            } catch (error) {
                console.error('Recognition start failed:', error);
                showVoiceFeedback('Failed to start voice recognition', 'error');
            }
        } else {
            recognition.stop();
            isListening = false;
            voiceWidget.style.background = '';
            voiceWidget.innerHTML = '<i class="bx bx-microphone"></i>';
            showVoiceFeedback('üîá Voice commands disabled', 'info');
        }
    });

    const style = document.createElement('style');
    style.textContent = `
        .pulse-ring {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 70px;
            height: 70px;
            border: 2px solid var(--primary-color);
            border-radius: 50%;
            animation: pulse 1.5s infinite;
            pointer-events: none;
        }
        
        @keyframes pulse {
            0% {
                transform: translate(-50%, -50%) scale(0.8);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(1.2);
                opacity: 0;
            }
        }
        
        .voice-feedback.success {
            background: var(--primary-color);
            color: var(--bg-color);
        }
        
        .voice-feedback.error {
            background: #ff4757;
            color: white;
        }
        
        .voice-feedback.info {
            background: #2ed573;
            color: white;
        }
        
        .voice-feedback.listening {
            background: #ffa502;
            color: white;
        }
        
        .voice-feedback.interim {
            background: #747d8c;
            color: white;
        }
    `;
    document.head.appendChild(style);

    function showVoiceFeedback(message, type = 'info') {
        const feedback = document.getElementById('voice-feedback');
        if (!feedback) return;
        
        feedback.textContent = message;
        feedback.className = 'voice-feedback glass-card';
        feedback.classList.add(type);
        feedback.style.display = 'block';
        
        if (timeoutId) clearTimeout(timeoutId);
        
        const delay = type === 'info' ? 4000 : 3000;
        timeoutId = setTimeout(() => {
            feedback.style.display = 'none';
        }, delay);
    }

    voiceCommands.help = () => {
        const commands = [
            'üéØ **Navigation**: "go to about", "show me skills", "home", "contact"',
            'üõ† **Features**: "open terminal", "code editor", "collaborate"',
            'üé® **Appearance**: "dark mode", "light mode"',
            'üìÑ **Documents**: "show resume", "download CV"',
            'üíº **Work**: "hire me", "let\'s work together"'
        ].join('\n\n');
        
        showVoiceFeedback('üó£Ô∏è **Available Voice Commands:**\n\n' + commands, 'info');
    };
    commandKeywords.help = ['help', 'what can i say', 'commands', 'what commands'];

    setTimeout(() => {
        showVoiceFeedback('üé§ Click the microphone to use voice commands!', 'info');
    }, 3000);
}

// Collaborative Demo
function initCollaborativeDemo() {
    const collaborationWidget = document.querySelector('.collab-widget');
    const collaborationModal = document.querySelector('.collab-modal');
    
    if (!collaborationWidget || !collaborationModal) return;

    collaborationWidget.addEventListener('click', () => {
        collaborationModal.classList.add('active');
        simulateCollaboration(collaborationModal);
    });

    collaborationModal.querySelector('.close-collab').addEventListener('click', () => {
        collaborationModal.classList.remove('active');
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && collaborationModal.classList.contains('active')) {
            collaborationModal.classList.remove('active');
        }
    });

    function simulateCollaboration(modal) {
        const textarea = modal.querySelector('textarea');
        const chat = modal.querySelector('.collab-chat');
        
        setTimeout(() => {
            const message = document.createElement('div');
            message.className = 'message';
            message.textContent = 'Guest: This is a simulation of real-time collaboration!';
            chat.appendChild(message);
            chat.scrollTop = chat.scrollHeight;
        }, 2000);

        textarea.addEventListener('input', () => {
            if (Math.random() > 0.7) {
                setTimeout(() => {
                    const messages = [
                        "That's interesting!",
                        "I agree with your approach.",
                        "Have you considered using React hooks?",
                        "The performance looks good!",
                        "Let me test this code..."
                    ];
                    const response = messages[Math.floor(Math.random() * messages.length)];
                    
                    const message = document.createElement('div');
                    message.className = 'message';
                    message.textContent = `Guest: ${response}`;
                    chat.appendChild(message);
                    chat.scrollTop = chat.scrollHeight;
                }, 1000);
            }
        });
    }
}

// Skill Tree Interaction
function initSkillTree() {
    const skillNodes = document.querySelectorAll('.skill-node');
    
    skillNodes.forEach(node => {
        node.addEventListener('click', function() {
            const skill = this.getAttribute('data-skill');
            const level = this.getAttribute('data-level');
            showSkillDetail(skill, level);
        });
    });

    function showSkillDetail(skill, level) {
        const skillDetails = {
            'html': 'HTML5 with semantic markup and accessibility',
            'css': 'CSS3 with modern layouts and animations',
            'js': 'JavaScript ES6+ with modern frameworks',
            'react': 'React with hooks and state management'
        };
        
        showVoiceFeedback(`${skill.toUpperCase()} - Level ${level}: ${skillDetails[skill]}`);
    }
}

// Reading Progress
function initReadingProgress() {
    const progressBar = document.getElementById('reading-progress');
    if (!progressBar) return;

    window.addEventListener('scroll', () => {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight - windowHeight;
        const scrollTop = window.pageYOffset;
        const progress = (scrollTop / documentHeight);
        
        progressBar.style.transform = `scaleX(${progress})`;
    });
}

// Parallax Effects
function initParallaxEffects() {
    const parallaxSections = document.querySelectorAll('.parallax-section');
    
    window.addEventListener('scroll', () => {
        const scrolled = window.pageYOffset;
        
        parallaxSections.forEach(section => {
            const rate = scrolled * -0.5;
            const bg = section.querySelector('.parallax-bg');
            if (bg) {
                bg.style.transform = `translateY(${rate}px)`;
            }
        });
    });
}

// Lazy Loading
function initLazyLoading() {
    const lazyImages = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });

    lazyImages.forEach(img => imageObserver.observe(img));
}

// Scroll Animations
function initScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                if (entry.target.classList.contains('stats-container')) {
                    animateStats();
                }
                if (entry.target.classList.contains('skill-bar')) {
                    animateSkillBars();
                }
                if (entry.target.classList.contains('project-card')) {
                    unlockAchievement('projectViewed');
                }
                if (entry.target.id === 'contact') {
                    unlockAchievement('contactUsed');
                }
                entry.target.classList.add('animated');
            }
        });
    }, { threshold: 0.1 });

    document.querySelectorAll('section, .stat-item, .skill-bar, .project-card').forEach(el => {
        observer.observe(el);
    });
}

// Stats Counter Animation
function animateStats() {
    const statNumbers = document.querySelectorAll('.stat-number');
    
    statNumbers.forEach(stat => {
        const target = parseInt(stat.getAttribute('data-count')) || 0;
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        
        const timer = setInterval(() => {
            current += step;
            if (current >= target) {
                current = target;
                clearInterval(timer);
            }
            stat.textContent = Math.floor(current);
        }, 16);
    });
}

// Animate skill bars
function animateSkillBars() {
    const progressBars = document.querySelectorAll('.progress');
    progressBars.forEach(bar => {
        const width = bar.getAttribute('data-width') + '%';
        bar.style.width = width;
    });
}

// Back to Top Button
function initBackToTop() {
    const backToTop = document.querySelector('.back-to-top');
    if (!backToTop) return;

    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            backToTop.classList.add('active');
        } else {
            backToTop.classList.remove('active');
        }
    });

    backToTop.addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
}

// Form Handling
function initFormHandling() {
    const contactForm = document.getElementById('contactForm');
    if (!contactForm) return;
    
    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const inputs = contactForm.querySelectorAll('input, textarea');
        let isValid = true;
        
        inputs.forEach(input => {
            if (input.hasAttribute('required') && !input.value.trim()) {
                isValid = false;
                input.style.boxShadow = '0 0 10px rgba(255, 0, 0, 0.5)';
                input.style.borderColor = 'red';
            } else {
                input.style.boxShadow = '';
                input.style.borderColor = '';
                
                if (input.type === 'email' && input.value) {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(input.value)) {
                        isValid = false;
                        input.style.boxShadow = '0 0 10px rgba(255, 0, 0, 0.5)';
                        input.style.borderColor = 'red';
                    }
                }
            }
        });
        
        if (isValid) {
            const submitBtn = contactForm.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Sending...';
            submitBtn.disabled = true;
            
            setTimeout(() => {
                alert('Thank you for your message! I will get back to you soon.');
                contactForm.reset();
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }, 1500);
        } else {
            alert('Please fill in all required fields correctly.');
        }
    });
}

// Mobile Menu
function initMobileMenu() {
    const menuToggle = document.querySelector('.menu-toggle');
    const navbar = document.querySelector('.navbar');
    
    if (menuToggle && navbar) {
        menuToggle.addEventListener('click', function() {
            menuToggle.classList.toggle('active');
            navbar.classList.toggle('active');
            document.body.style.overflow = navbar.classList.contains('active') ? 'hidden' : '';
        });

        const navLinks = navbar.querySelectorAll('a');
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                menuToggle.classList.remove('active');
                navbar.classList.remove('active');
                document.body.style.overflow = '';
            });
        });

        document.addEventListener('click', function(e) {
            if (navbar.classList.contains('active') && 
                !navbar.contains(e.target) && 
                !menuToggle.contains(e.target)) {
                menuToggle.classList.remove('active');
                navbar.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    }
}

// NEW FEATURES SECTION

// AI Chat Assistant
function initAIAssistant() {
    const aiWidget = document.querySelector('.ai-assistant-widget');
    const aiModal = document.getElementById('ai-chat-modal');
    const closeAI = document.querySelector('.close-ai');
    const aiInput = document.getElementById('ai-input');
    const sendAI = document.getElementById('send-ai');
    const aiMessages = document.getElementById('ai-messages');

    if (!aiWidget || !aiModal) return;

    const aiResponses = {
        'hello': "Hello! I'm Ritek's AI assistant. How can I help you today?",
        'skills': "Ritek is skilled in: HTML, CSS, JavaScript, Java, Python, MySQL, React, Node.js and more!",
        'projects': "He has built: Hospital Management System, Pac-Man AI Game, Smart Tracker App, and this portfolio!",
        'experience': "Ritek has 3+ years of experience in web development and is currently pursuing MCA.",
        'contact': "You can reach Ritek at: rm7566760@gmail.com or +91 7500760585",
        'resume': "You can download Ritek's resume from the home section or by saying 'download resume'.",
        'default': "I'm not sure I understand. Ask me about skills, projects, experience, or contact info!"
    };

    function addMessage(text, isUser = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `ai-message ${isUser ? 'user-message' : 'bot-message'}`;
        messageDiv.textContent = text;
        aiMessages.appendChild(messageDiv);
        aiMessages.scrollTop = aiMessages.scrollHeight;
    }

    function processAIMessage(message) {
        const lowerMsg = message.toLowerCase();
        let response = aiResponses.default;

        if (lowerMsg.includes('hello') || lowerMsg.includes('hi')) {
            response = aiResponses.hello;
        } else if (lowerMsg.includes('skill')) {
            response = aiResponses.skills;
        } else if (lowerMsg.includes('project')) {
            response = aiResponses.projects;
        } else if (lowerMsg.includes('experience') || lowerMsg.includes('background')) {
            response = aiResponses.experience;
        } else if (lowerMsg.includes('contact') || lowerMsg.includes('email') || lowerMsg.includes('phone')) {
            response = aiResponses.contact;
        } else if (lowerMsg.includes('resume') || lowerMsg.includes('cv')) {
            response = aiResponses.resume;
        }

        // Simulate typing delay
        setTimeout(() => {
            addMessage(response);
        }, 1000);
    }

    aiWidget.addEventListener('click', () => {
        aiModal.classList.add('active');
        unlockAchievement('aiAssistantUsed');
    });

    closeAI.addEventListener('click', () => {
        aiModal.classList.remove('active');
    });

    sendAI.addEventListener('click', () => {
        const message = aiInput.value.trim();
        if (message) {
            addMessage(message, true);
            aiInput.value = '';
            processAIMessage(message);
        }
    });

    aiInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendAI.click();
        }
    });
}

// Crypto Price Ticker
async function initCryptoTicker() {
    const cryptoPrices = document.getElementById('crypto-prices');
    if (!cryptoPrices) return;
    
    async function fetchCryptoPrices() {
        try {
            // Using a free API endpoint
            const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,solana&vs_currencies=usd');
            const data = await response.json();
            
            cryptoPrices.innerHTML = `
                <span>BTC: $${data.bitcoin?.usd?.toLocaleString() || '--'}</span>
                <span>ETH: $${data.ethereum?.usd?.toLocaleString() || '--'}</span>
                <span>SOL: $${data.solana?.usd?.toLocaleString() || '--'}</span>
            `;
        } catch (error) {
            console.log('Crypto API error, using fallback data');
            cryptoPrices.innerHTML = `
                <span>BTC: $45,000</span>
                <span>ETH: $2,800</span>
                <span>SOL: $120</span>
            `;
        }
    }
    
    fetchCryptoPrices();
    setInterval(fetchCryptoPrices, 60000);
}

// Weather Integration
async function initWeatherWidget() {
    const weatherIcon = document.getElementById('weather-icon');
    const tempElement = document.querySelector('.temp');
    const locationElement = document.querySelector('.location');
    
    if (!weatherIcon || !tempElement || !locationElement) return;

    async function fetchWeather() {
        try {
            // Fallback to a default location since we don't have API key
            tempElement.textContent = '24¬∞C';
            locationElement.textContent = 'Haldwani, IN';
            weatherIcon.className = 'bx bx-sun';
            
        } catch (error) {
            tempElement.textContent = '--¬∞C';
            locationElement.textContent = 'Location unavailable';
        }
    }
    
    fetchWeather();
}

// 3D Model Viewer
function init3DViewer() {
    const viewerWidget = document.querySelector('.3d-viewer-widget');
    const viewerModal = document.getElementById('model-viewer');
    const closeViewer = document.querySelector('.close-viewer');
    
    if (viewerWidget && viewerModal) {
        viewerWidget.addEventListener('click', () => {
            viewerModal.classList.add('active');
            init3DScene();
            unlockAchievement('3DViewerOpened');
        });
        
        closeViewer.addEventListener('click', () => {
            viewerModal.classList.remove('active');
        });
    }
    
    function init3DScene() {
        const canvas = document.getElementById('3d-canvas');
        if (!canvas) return;
        
        // Simple 3D scene placeholder
        const ctx = canvas.getContext('2d');
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        
        ctx.fillStyle = 'rgba(14, 239, 255, 0.1)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.fillStyle = 'var(--primary-color)';
        ctx.font = '20px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('3D Viewer Placeholder', canvas.width/2, canvas.height/2);
        ctx.fillText('Advanced 3D features would be implemented here', canvas.width/2, canvas.height/2 + 30);
    }
}

// Live Collaboration Cursors
function initLiveCursors() {
    const cursorsContainer = document.getElementById('live-cursors');
    if (!cursorsContainer) return;
    
    // Simulate multiple users (for demo)
    const users = ['User1', 'User2', 'User3'];
    const colors = ['#ff6b6b', '#48dbfb', '#1dd1a1'];
    
    users.forEach((user, index) => {
        const cursor = document.createElement('div');
        cursor.className = 'live-cursor';
        cursor.style.background = colors[index];
        cursor.style.display = 'none';
        cursorsContainer.appendChild(cursor);
        
        // Simulate random movement
        setInterval(() => {
            if (Math.random() > 0.3) {
                cursor.style.left = Math.random() * window.innerWidth + 'px';
                cursor.style.top = Math.random() * window.innerHeight + 'px';
                cursor.style.display = 'block';
                
                setTimeout(() => {
                    cursor.style.display = 'none';
                }, 2000);
            }
        }, 3000);
    });
}

// Initialize all new features
function initNewFeatures() {
    initAIAssistant();
    initCryptoTicker();
    initWeatherWidget();
    init3DViewer();
    initLiveCursors();
}

// Achievement System
const achievements = {
    portfolioViewed: { unlocked: false, name: "First Impression", message: "Welcome to my portfolio!" },
    terminalOpened: { unlocked: false, name: "Command Master", message: "You discovered the terminal!" },
    playgroundOpened: { unlocked: false, name: "Code Explorer", message: "You opened the code playground!" },
    codeExecuted: { unlocked: false, name: "Code Runner", message: "You executed your first code!" },
    themeChanged: { unlocked: false, name: "Theme Changer", message: "You changed the theme!" },
    projectViewed: { unlocked: false, name: "Project Explorer", message: "You viewed my projects!" },
    contactUsed: { unlocked: false, name: "Social Butterfly", message: "You checked my contact info!" },
    scrollMaster: { unlocked: false, name: "Scroll Master", message: "You scrolled through the entire portfolio!" },
    voiceCommandUsed: { unlocked: false, name: "Voice Commander", message: "You used voice commands!" },
    aiAssistantUsed: { unlocked: false, name: "AI Companion", message: "You used the AI assistant!" },
    cryptoChecked: { unlocked: false, name: "Crypto Trader", message: "You checked crypto prices!" },
    weatherChecked: { unlocked: false, name: "Weather Watcher", message: "You checked the weather!" },
    '3DViewerOpened': { unlocked: false, name: "3D Explorer", message: "You opened the 3D viewer!" }
};

function unlockAchievement(achievementKey) {
    if (achievements[achievementKey] && !achievements[achievementKey].unlocked) {
        achievements[achievementKey].unlocked = true;
        showAchievementNotification(achievements[achievementKey].name, achievements[achievementKey].message);
    }
}

function showAchievementNotification(title, message) {
    const notification = document.getElementById('achievement-notification');
    const achievementMessage = document.getElementById('achievement-message');
    
    if (notification && achievementMessage) {
        achievementMessage.textContent = `${title}: ${message}`;
        notification.style.display = 'flex';
        
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
}

// Scroll achievement
let scrollAchievementUnlocked = false;
window.addEventListener('scroll', function() {
    const scrollableHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollProgress = (window.pageYOffset / scrollableHeight) * 100;
    
    if (scrollProgress > 90 && !scrollAchievementUnlocked) {
        unlockAchievement('scrollMaster');
        scrollAchievementUnlocked = true;
    }
});
